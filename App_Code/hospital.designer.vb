'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34011
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DB_65873_mic")>  _
Partial Public Class hospitalDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertmic_alert(instance As mic_alert)
    End Sub
  Partial Private Sub Updatemic_alert(instance As mic_alert)
    End Sub
  Partial Private Sub Deletemic_alert(instance As mic_alert)
    End Sub
  Partial Private Sub Insertmic_volunteer(instance As mic_volunteer)
    End Sub
  Partial Private Sub Updatemic_volunteer(instance As mic_volunteer)
    End Sub
  Partial Private Sub Deletemic_volunteer(instance As mic_volunteer)
    End Sub
  Partial Private Sub Insertmic_book_appointment(instance As mic_book_appointment)
    End Sub
  Partial Private Sub Updatemic_book_appointment(instance As mic_book_appointment)
    End Sub
  Partial Private Sub Deletemic_book_appointment(instance As mic_book_appointment)
    End Sub
  Partial Private Sub Insertmic_career_application(instance As mic_career_application)
    End Sub
  Partial Private Sub Updatemic_career_application(instance As mic_career_application)
    End Sub
  Partial Private Sub Deletemic_career_application(instance As mic_career_application)
    End Sub
  Partial Private Sub Insertmic_contact(instance As mic_contact)
    End Sub
  Partial Private Sub Updatemic_contact(instance As mic_contact)
    End Sub
  Partial Private Sub Deletemic_contact(instance As mic_contact)
    End Sub
  Partial Private Sub Insertmic_donation(instance As mic_donation)
    End Sub
  Partial Private Sub Updatemic_donation(instance As mic_donation)
    End Sub
  Partial Private Sub Deletemic_donation(instance As mic_donation)
    End Sub
  Partial Private Sub Insertmic_find_service(instance As mic_find_service)
    End Sub
  Partial Private Sub Updatemic_find_service(instance As mic_find_service)
    End Sub
  Partial Private Sub Deletemic_find_service(instance As mic_find_service)
    End Sub
  Partial Private Sub Insertmic_job_post(instance As mic_job_post)
    End Sub
  Partial Private Sub Updatemic_job_post(instance As mic_job_post)
    End Sub
  Partial Private Sub Deletemic_job_post(instance As mic_job_post)
    End Sub
  Partial Private Sub Insertmic_location(instance As mic_location)
    End Sub
  Partial Private Sub Updatemic_location(instance As mic_location)
    End Sub
  Partial Private Sub Deletemic_location(instance As mic_location)
    End Sub
  Partial Private Sub Insertmic_mailing_list(instance As mic_mailing_list)
    End Sub
  Partial Private Sub Updatemic_mailing_list(instance As mic_mailing_list)
    End Sub
  Partial Private Sub Deletemic_mailing_list(instance As mic_mailing_list)
    End Sub
  Partial Private Sub Insertmic_news_event(instance As mic_news_event)
    End Sub
  Partial Private Sub Updatemic_news_event(instance As mic_news_event)
    End Sub
  Partial Private Sub Deletemic_news_event(instance As mic_news_event)
    End Sub
  Partial Private Sub Insertmic_pay_bill(instance As mic_pay_bill)
    End Sub
  Partial Private Sub Updatemic_pay_bill(instance As mic_pay_bill)
    End Sub
  Partial Private Sub Deletemic_pay_bill(instance As mic_pay_bill)
    End Sub
  Partial Private Sub Insertmic_slider(instance As mic_slider)
    End Sub
  Partial Private Sub Updatemic_slider(instance As mic_slider)
    End Sub
  Partial Private Sub Deletemic_slider(instance As mic_slider)
    End Sub
  Partial Private Sub Insertmic_symptom_checker(instance As mic_symptom_checker)
    End Sub
  Partial Private Sub Updatemic_symptom_checker(instance As mic_symptom_checker)
    End Sub
  Partial Private Sub Deletemic_symptom_checker(instance As mic_symptom_checker)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DB_65873_micConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property mic_alerts() As System.Data.Linq.Table(Of mic_alert)
		Get
			Return Me.GetTable(Of mic_alert)
		End Get
	End Property
	
	Public ReadOnly Property mic_volunteers() As System.Data.Linq.Table(Of mic_volunteer)
		Get
			Return Me.GetTable(Of mic_volunteer)
		End Get
	End Property
	
	Public ReadOnly Property mic_book_appointments() As System.Data.Linq.Table(Of mic_book_appointment)
		Get
			Return Me.GetTable(Of mic_book_appointment)
		End Get
	End Property
	
	Public ReadOnly Property mic_career_applications() As System.Data.Linq.Table(Of mic_career_application)
		Get
			Return Me.GetTable(Of mic_career_application)
		End Get
	End Property
	
	Public ReadOnly Property mic_contacts() As System.Data.Linq.Table(Of mic_contact)
		Get
			Return Me.GetTable(Of mic_contact)
		End Get
	End Property
	
	Public ReadOnly Property mic_donations() As System.Data.Linq.Table(Of mic_donation)
		Get
			Return Me.GetTable(Of mic_donation)
		End Get
	End Property
	
	Public ReadOnly Property mic_find_services() As System.Data.Linq.Table(Of mic_find_service)
		Get
			Return Me.GetTable(Of mic_find_service)
		End Get
	End Property
	
	Public ReadOnly Property mic_job_posts() As System.Data.Linq.Table(Of mic_job_post)
		Get
			Return Me.GetTable(Of mic_job_post)
		End Get
	End Property
	
	Public ReadOnly Property mic_locations() As System.Data.Linq.Table(Of mic_location)
		Get
			Return Me.GetTable(Of mic_location)
		End Get
	End Property
	
	Public ReadOnly Property mic_mailing_lists() As System.Data.Linq.Table(Of mic_mailing_list)
		Get
			Return Me.GetTable(Of mic_mailing_list)
		End Get
	End Property
	
	Public ReadOnly Property mic_news_events() As System.Data.Linq.Table(Of mic_news_event)
		Get
			Return Me.GetTable(Of mic_news_event)
		End Get
	End Property
	
	Public ReadOnly Property mic_pay_bills() As System.Data.Linq.Table(Of mic_pay_bill)
		Get
			Return Me.GetTable(Of mic_pay_bill)
		End Get
	End Property
	
	Public ReadOnly Property mic_sliders() As System.Data.Linq.Table(Of mic_slider)
		Get
			Return Me.GetTable(Of mic_slider)
		End Get
	End Property
	
	Public ReadOnly Property mic_symptom_checkers() As System.Data.Linq.Table(Of mic_symptom_checker)
		Get
			Return Me.GetTable(Of mic_symptom_checker)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_alerts")>  _
Partial Public Class mic_alert
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _alert_date As System.Nullable(Of Date)
	
	Private _short_alert As String
	
	Private _long_alert As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub Onalert_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onalert_dateChanged()
    End Sub
    Partial Private Sub Onshort_alertChanging(value As String)
    End Sub
    Partial Private Sub Onshort_alertChanged()
    End Sub
    Partial Private Sub Onlong_alertChanging(value As String)
    End Sub
    Partial Private Sub Onlong_alertChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alert_date", DbType:="Date")>  _
	Public Property alert_date() As System.Nullable(Of Date)
		Get
			Return Me._alert_date
		End Get
		Set
			If (Me._alert_date.Equals(value) = false) Then
				Me.Onalert_dateChanging(value)
				Me.SendPropertyChanging
				Me._alert_date = value
				Me.SendPropertyChanged("alert_date")
				Me.Onalert_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_short_alert", DbType:="VarChar(30)")>  _
	Public Property short_alert() As String
		Get
			Return Me._short_alert
		End Get
		Set
			If (String.Equals(Me._short_alert, value) = false) Then
				Me.Onshort_alertChanging(value)
				Me.SendPropertyChanging
				Me._short_alert = value
				Me.SendPropertyChanged("short_alert")
				Me.Onshort_alertChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_long_alert", DbType:="VarChar(80)")>  _
	Public Property long_alert() As String
		Get
			Return Me._long_alert
		End Get
		Set
			If (String.Equals(Me._long_alert, value) = false) Then
				Me.Onlong_alertChanging(value)
				Me.SendPropertyChanging
				Me._long_alert = value
				Me.SendPropertyChanged("long_alert")
				Me.Onlong_alertChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_volunteer")>  _
Partial Public Class mic_volunteer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _gender As String
	
	Private _age As System.Nullable(Of Integer)
	
	Private _contact_number As String
	
	Private _email As String
	
	Private _address As String
	
	Private _city As String
	
	Private _province As String
	
	Private _qualification As String
	
	Private _school_name As String
	
	Private _date As System.Nullable(Of Date)
	
	Private _resume As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OnageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnageChanged()
    End Sub
    Partial Private Sub Oncontact_numberChanging(value As String)
    End Sub
    Partial Private Sub Oncontact_numberChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub OnqualificationChanging(value As String)
    End Sub
    Partial Private Sub OnqualificationChanged()
    End Sub
    Partial Private Sub Onschool_nameChanging(value As String)
    End Sub
    Partial Private Sub Onschool_nameChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnresumeChanging(value As String)
    End Sub
    Partial Private Sub OnresumeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(20)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="VarChar(20)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="VarChar(20)")>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_age", DbType:="Int")>  _
	Public Property age() As System.Nullable(Of Integer)
		Get
			Return Me._age
		End Get
		Set
			If (Me._age.Equals(value) = false) Then
				Me.OnageChanging(value)
				Me.SendPropertyChanging
				Me._age = value
				Me.SendPropertyChanged("age")
				Me.OnageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_number", DbType:="VarChar(10)")>  _
	Public Property contact_number() As String
		Get
			Return Me._contact_number
		End Get
		Set
			If (String.Equals(Me._contact_number, value) = false) Then
				Me.Oncontact_numberChanging(value)
				Me.SendPropertyChanging
				Me._contact_number = value
				Me.SendPropertyChanged("contact_number")
				Me.Oncontact_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(20)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(30)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="VarChar(22)")>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qualification", DbType:="VarChar(200)")>  _
	Public Property qualification() As String
		Get
			Return Me._qualification
		End Get
		Set
			If (String.Equals(Me._qualification, value) = false) Then
				Me.OnqualificationChanging(value)
				Me.SendPropertyChanging
				Me._qualification = value
				Me.SendPropertyChanged("qualification")
				Me.OnqualificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_school_name", DbType:="VarChar(40)")>  _
	Public Property school_name() As String
		Get
			Return Me._school_name
		End Get
		Set
			If (String.Equals(Me._school_name, value) = false) Then
				Me.Onschool_nameChanging(value)
				Me.SendPropertyChanging
				Me._school_name = value
				Me.SendPropertyChanged("school_name")
				Me.Onschool_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="DateTime")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="resume", Storage:="_resume", DbType:="VarChar(40)")>  _
	Public Property [resume]() As String
		Get
			Return Me._resume
		End Get
		Set
			If (String.Equals(Me._resume, value) = false) Then
				Me.OnresumeChanging(value)
				Me.SendPropertyChanging
				Me._resume = value
				Me.SendPropertyChanged("[resume]")
				Me.OnresumeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_book_appointment")>  _
Partial Public Class mic_book_appointment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _address As String
	
	Private _city As String
	
	Private _province As String
	
	Private _postal_code As String
	
	Private _phone As String
	
	Private _date As System.Nullable(Of Date)
	
	Private _reason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub Onpostal_codeChanging(value As String)
    End Sub
    Partial Private Sub Onpostal_codeChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnreasonChanging(value As String)
    End Sub
    Partial Private Sub OnreasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(30)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="VarChar(30)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(50)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(30)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="VarChar(30)")>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postal_code", DbType:="VarChar(7)")>  _
	Public Property postal_code() As String
		Get
			Return Me._postal_code
		End Get
		Set
			If (String.Equals(Me._postal_code, value) = false) Then
				Me.Onpostal_codeChanging(value)
				Me.SendPropertyChanging
				Me._postal_code = value
				Me.SendPropertyChanged("postal_code")
				Me.Onpostal_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(15)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="DateTime")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reason", DbType:="VarChar(MAX)")>  _
	Public Property reason() As String
		Get
			Return Me._reason
		End Get
		Set
			If (String.Equals(Me._reason, value) = false) Then
				Me.OnreasonChanging(value)
				Me.SendPropertyChanging
				Me._reason = value
				Me.SendPropertyChanged("reason")
				Me.OnreasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_career_application")>  _
Partial Public Class mic_career_application
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _career_id As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _address As String
	
	Private _country As String
	
	Private _province As String
	
	Private _city As String
	
	Private _zip As String
	
	Private _phone As String
	
	Private _email As String
	
	Private _resume As String
	
	Private _coverletter_ As String
	
	Private _ques_status As System.Nullable(Of Integer)
	
	Private _ques_crime As System.Nullable(Of Integer)
	
	Private _ques_certificate As System.Nullable(Of Integer)
	
	Private _skill_proficiency As System.Nullable(Of Integer)
	
	Private _skill_experience As System.Nullable(Of Integer)
	
	Private _reason As String
	
	Private _comment As String
	
	Private _consent As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncareer_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncareer_idChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OncountryChanging(value As String)
    End Sub
    Partial Private Sub OncountryChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnresumeChanging(value As String)
    End Sub
    Partial Private Sub OnresumeChanged()
    End Sub
    Partial Private Sub Oncoverletter_Changing(value As String)
    End Sub
    Partial Private Sub Oncoverletter_Changed()
    End Sub
    Partial Private Sub Onques_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onques_statusChanged()
    End Sub
    Partial Private Sub Onques_crimeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onques_crimeChanged()
    End Sub
    Partial Private Sub Onques_certificateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onques_certificateChanged()
    End Sub
    Partial Private Sub Onskill_proficiencyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onskill_proficiencyChanged()
    End Sub
    Partial Private Sub Onskill_experienceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onskill_experienceChanged()
    End Sub
    Partial Private Sub OnreasonChanging(value As String)
    End Sub
    Partial Private Sub OnreasonChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OnconsentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnconsentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_career_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property career_id() As Integer
		Get
			Return Me._career_id
		End Get
		Set
			If ((Me._career_id = value)  _
						= false) Then
				Me.Oncareer_idChanging(value)
				Me.SendPropertyChanging
				Me._career_id = value
				Me.SendPropertyChanged("career_id")
				Me.Oncareer_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="NVarChar(20)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="NVarChar(20)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="NVarChar(MAX)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="NVarChar(20)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me.OncountryChanging(value)
				Me.SendPropertyChanging
				Me._country = value
				Me.SendPropertyChanged("country")
				Me.OncountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="NVarChar(2)")>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zip", DbType:="NVarChar(6)")>  _
	Public Property zip() As String
		Get
			Return Me._zip
		End Get
		Set
			If (String.Equals(Me._zip, value) = false) Then
				Me.OnzipChanging(value)
				Me.SendPropertyChanging
				Me._zip = value
				Me.SendPropertyChanged("zip")
				Me.OnzipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="NVarChar(20)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(20)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="resume", Storage:="_resume", DbType:="NVarChar(20)")>  _
	Public Property [resume]() As String
		Get
			Return Me._resume
		End Get
		Set
			If (String.Equals(Me._resume, value) = false) Then
				Me.OnresumeChanging(value)
				Me.SendPropertyChanging
				Me._resume = value
				Me.SendPropertyChanged("[resume]")
				Me.OnresumeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[coverletter"&Global.Microsoft.VisualBasic.ChrW(9)&"]", Storage:="_coverletter_", DbType:="NVarChar(20)")>  _
	Public Property coverletter_() As String
		Get
			Return Me._coverletter_
		End Get
		Set
			If (String.Equals(Me._coverletter_, value) = false) Then
				Me.Oncoverletter_Changing(value)
				Me.SendPropertyChanging
				Me._coverletter_ = value
				Me.SendPropertyChanged("coverletter_")
				Me.Oncoverletter_Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ques_status", DbType:="Int")>  _
	Public Property ques_status() As System.Nullable(Of Integer)
		Get
			Return Me._ques_status
		End Get
		Set
			If (Me._ques_status.Equals(value) = false) Then
				Me.Onques_statusChanging(value)
				Me.SendPropertyChanging
				Me._ques_status = value
				Me.SendPropertyChanged("ques_status")
				Me.Onques_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ques_crime", DbType:="Int")>  _
	Public Property ques_crime() As System.Nullable(Of Integer)
		Get
			Return Me._ques_crime
		End Get
		Set
			If (Me._ques_crime.Equals(value) = false) Then
				Me.Onques_crimeChanging(value)
				Me.SendPropertyChanging
				Me._ques_crime = value
				Me.SendPropertyChanged("ques_crime")
				Me.Onques_crimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ques_certificate", DbType:="Int")>  _
	Public Property ques_certificate() As System.Nullable(Of Integer)
		Get
			Return Me._ques_certificate
		End Get
		Set
			If (Me._ques_certificate.Equals(value) = false) Then
				Me.Onques_certificateChanging(value)
				Me.SendPropertyChanging
				Me._ques_certificate = value
				Me.SendPropertyChanged("ques_certificate")
				Me.Onques_certificateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_skill_proficiency", DbType:="Int")>  _
	Public Property skill_proficiency() As System.Nullable(Of Integer)
		Get
			Return Me._skill_proficiency
		End Get
		Set
			If (Me._skill_proficiency.Equals(value) = false) Then
				Me.Onskill_proficiencyChanging(value)
				Me.SendPropertyChanging
				Me._skill_proficiency = value
				Me.SendPropertyChanged("skill_proficiency")
				Me.Onskill_proficiencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_skill_experience", DbType:="Int")>  _
	Public Property skill_experience() As System.Nullable(Of Integer)
		Get
			Return Me._skill_experience
		End Get
		Set
			If (Me._skill_experience.Equals(value) = false) Then
				Me.Onskill_experienceChanging(value)
				Me.SendPropertyChanging
				Me._skill_experience = value
				Me.SendPropertyChanged("skill_experience")
				Me.Onskill_experienceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reason", DbType:="NVarChar(50)")>  _
	Public Property reason() As String
		Get
			Return Me._reason
		End Get
		Set
			If (String.Equals(Me._reason, value) = false) Then
				Me.OnreasonChanging(value)
				Me.SendPropertyChanging
				Me._reason = value
				Me.SendPropertyChanged("reason")
				Me.OnreasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="NVarChar(MAX)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_consent", DbType:="Int")>  _
	Public Property consent() As System.Nullable(Of Integer)
		Get
			Return Me._consent
		End Get
		Set
			If (Me._consent.Equals(value) = false) Then
				Me.OnconsentChanging(value)
				Me.SendPropertyChanging
				Me._consent = value
				Me.SendPropertyChanged("consent")
				Me.OnconsentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_contact")>  _
Partial Public Class mic_contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _email As String
	
	Private _city As String
	
	Private _province As String
	
	Private _subject As String
	
	Private _message As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub OnsubjectChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectChanged()
    End Sub
    Partial Private Sub OnmessageChanging(value As String)
    End Sub
    Partial Private Sub OnmessageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(30)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="VarChar(30)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(30)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="VarChar(30)")>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="VarChar(50)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me.OnsubjectChanging(value)
				Me.SendPropertyChanging
				Me._subject = value
				Me.SendPropertyChanged("subject")
				Me.OnsubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_message", DbType:="VarChar(MAX)")>  _
	Public Property message() As String
		Get
			Return Me._message
		End Get
		Set
			If (String.Equals(Me._message, value) = false) Then
				Me.OnmessageChanging(value)
				Me.SendPropertyChanging
				Me._message = value
				Me.SendPropertyChanged("message")
				Me.OnmessageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_donation")>  _
Partial Public Class mic_donation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _donation_id As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _address As String
	
	Private _city As String
	
	Private _province As String
	
	Private _zip As String
	
	Private _phone As String
	
	Private _email As String
	
	Private _survey As System.Nullable(Of Integer)
	
	Private _comment As String
	
	Private _amount As System.Nullable(Of Integer)
	
	Private _payment_type As System.Nullable(Of Integer)
	
	Private _card_number As String
	
	Private _security_number As System.Nullable(Of Integer)
	
	Private _cardholder_name As String
	
	Private _expiration As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondonation_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondonation_idChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnsurveyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsurveyChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub Onpayment_typeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpayment_typeChanged()
    End Sub
    Partial Private Sub Oncard_numberChanging(value As String)
    End Sub
    Partial Private Sub Oncard_numberChanged()
    End Sub
    Partial Private Sub Onsecurity_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsecurity_numberChanged()
    End Sub
    Partial Private Sub Oncardholder_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncardholder_nameChanged()
    End Sub
    Partial Private Sub OnexpirationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnexpirationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_donation_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property donation_id() As Integer
		Get
			Return Me._donation_id
		End Get
		Set
			If ((Me._donation_id = value)  _
						= false) Then
				Me.Ondonation_idChanging(value)
				Me.SendPropertyChanging
				Me._donation_id = value
				Me.SendPropertyChanged("donation_id")
				Me.Ondonation_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="NVarChar(20)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="NVarChar(20)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="NVarChar(MAX)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="NVarChar(2)")>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zip", DbType:="NVarChar(6)")>  _
	Public Property zip() As String
		Get
			Return Me._zip
		End Get
		Set
			If (String.Equals(Me._zip, value) = false) Then
				Me.OnzipChanging(value)
				Me.SendPropertyChanging
				Me._zip = value
				Me.SendPropertyChanged("zip")
				Me.OnzipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="NVarChar(20)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(20)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_survey", DbType:="Int")>  _
	Public Property survey() As System.Nullable(Of Integer)
		Get
			Return Me._survey
		End Get
		Set
			If (Me._survey.Equals(value) = false) Then
				Me.OnsurveyChanging(value)
				Me.SendPropertyChanging
				Me._survey = value
				Me.SendPropertyChanged("survey")
				Me.OnsurveyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="NVarChar(MAX)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Int")>  _
	Public Property amount() As System.Nullable(Of Integer)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payment_type", DbType:="Int")>  _
	Public Property payment_type() As System.Nullable(Of Integer)
		Get
			Return Me._payment_type
		End Get
		Set
			If (Me._payment_type.Equals(value) = false) Then
				Me.Onpayment_typeChanging(value)
				Me.SendPropertyChanging
				Me._payment_type = value
				Me.SendPropertyChanged("payment_type")
				Me.Onpayment_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_card_number", DbType:="NVarChar(20)")>  _
	Public Property card_number() As String
		Get
			Return Me._card_number
		End Get
		Set
			If (String.Equals(Me._card_number, value) = false) Then
				Me.Oncard_numberChanging(value)
				Me.SendPropertyChanging
				Me._card_number = value
				Me.SendPropertyChanged("card_number")
				Me.Oncard_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_security_number", DbType:="Int")>  _
	Public Property security_number() As System.Nullable(Of Integer)
		Get
			Return Me._security_number
		End Get
		Set
			If (Me._security_number.Equals(value) = false) Then
				Me.Onsecurity_numberChanging(value)
				Me.SendPropertyChanging
				Me._security_number = value
				Me.SendPropertyChanged("security_number")
				Me.Onsecurity_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardholder_name", DbType:="NVarChar(20)")>  _
	Public Property cardholder_name() As String
		Get
			Return Me._cardholder_name
		End Get
		Set
			If (String.Equals(Me._cardholder_name, value) = false) Then
				Me.Oncardholder_nameChanging(value)
				Me.SendPropertyChanging
				Me._cardholder_name = value
				Me.SendPropertyChanged("cardholder_name")
				Me.Oncardholder_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expiration", DbType:="Int")>  _
	Public Property expiration() As System.Nullable(Of Integer)
		Get
			Return Me._expiration
		End Get
		Set
			If (Me._expiration.Equals(value) = false) Then
				Me.OnexpirationChanging(value)
				Me.SendPropertyChanging
				Me._expiration = value
				Me.SendPropertyChanged("expiration")
				Me.OnexpirationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_find_service")>  _
Partial Public Class mic_find_service
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _service As String
	
	Private _unique As Char
	
	Private _location As String
	
	Private _details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnserviceChanging(value As String)
    End Sub
    Partial Private Sub OnserviceChanged()
    End Sub
    Partial Private Sub OnuniqueChanging(value As Char)
    End Sub
    Partial Private Sub OnuniqueChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As String)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    Partial Private Sub OndetailsChanging(value As String)
    End Sub
    Partial Private Sub OndetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property service() As String
		Get
			Return Me._service
		End Get
		Set
			If (String.Equals(Me._service, value) = false) Then
				Me.OnserviceChanging(value)
				Me.SendPropertyChanging
				Me._service = value
				Me.SendPropertyChanged("service")
				Me.OnserviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[unique]", Storage:="_unique", DbType:="Char(1) NOT NULL")>  _
	Public Property unique() As Char
		Get
			Return Me._unique
		End Get
		Set
			If ((Me._unique = value)  _
						= false) Then
				Me.OnuniqueChanging(value)
				Me.SendPropertyChanging
				Me._unique = value
				Me.SendPropertyChanged("unique")
				Me.OnuniqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_details", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property details() As String
		Get
			Return Me._details
		End Get
		Set
			If (String.Equals(Me._details, value) = false) Then
				Me.OndetailsChanging(value)
				Me.SendPropertyChanging
				Me._details = value
				Me.SendPropertyChanged("details")
				Me.OndetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_job_posts")>  _
Partial Public Class mic_job_post
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _position As String
	
	Private _location As String
	
	Private _details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnpositionChanging(value As String)
    End Sub
    Partial Private Sub OnpositionChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As String)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    Partial Private Sub OndetailsChanging(value As String)
    End Sub
    Partial Private Sub OndetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_position", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property position() As String
		Get
			Return Me._position
		End Get
		Set
			If (String.Equals(Me._position, value) = false) Then
				Me.OnpositionChanging(value)
				Me.SendPropertyChanging
				Me._position = value
				Me.SendPropertyChanged("position")
				Me.OnpositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_details", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property details() As String
		Get
			Return Me._details
		End Get
		Set
			If (String.Equals(Me._details, value) = false) Then
				Me.OndetailsChanging(value)
				Me.SendPropertyChanging
				Me._details = value
				Me.SendPropertyChanged("details")
				Me.OndetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_locations")>  _
Partial Public Class mic_location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _name As String
	
	Private _image As String
	
	Private _description As String
	
	Private _lat As System.Nullable(Of Decimal)
	
	Private _lng As System.Nullable(Of Decimal)
	
	Private _phone As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnimageChanging(value As String)
    End Sub
    Partial Private Sub OnimageChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnlatChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlatChanged()
    End Sub
    Partial Private Sub OnlngChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlngChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_image", DbType:="VarChar(50)")>  _
	Public Property image() As String
		Get
			Return Me._image
		End Get
		Set
			If (String.Equals(Me._image, value) = false) Then
				Me.OnimageChanging(value)
				Me.SendPropertyChanging
				Me._image = value
				Me.SendPropertyChanged("image")
				Me.OnimageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(MAX)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lat", DbType:="Decimal(18,12)")>  _
	Public Property lat() As System.Nullable(Of Decimal)
		Get
			Return Me._lat
		End Get
		Set
			If (Me._lat.Equals(value) = false) Then
				Me.OnlatChanging(value)
				Me.SendPropertyChanging
				Me._lat = value
				Me.SendPropertyChanged("lat")
				Me.OnlatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lng", DbType:="Decimal(18,12)")>  _
	Public Property lng() As System.Nullable(Of Decimal)
		Get
			Return Me._lng
		End Get
		Set
			If (Me._lng.Equals(value) = false) Then
				Me.OnlngChanging(value)
				Me.SendPropertyChanging
				Me._lng = value
				Me.SendPropertyChanged("lng")
				Me.OnlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(50)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_mailing_list")>  _
Partial Public Class mic_mailing_list
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mailing_id As Integer
	
	Private _name As String
	
	Private _email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmailing_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmailing_idChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mailing_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property mailing_id() As Integer
		Get
			Return Me._mailing_id
		End Get
		Set
			If ((Me._mailing_id = value)  _
						= false) Then
				Me.Onmailing_idChanging(value)
				Me.SendPropertyChanging
				Me._mailing_id = value
				Me.SendPropertyChanged("mailing_id")
				Me.Onmailing_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(20)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(20)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_news_events")>  _
Partial Public Class mic_news_event
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _date As System.Nullable(Of Date)
	
	Private _title As String
	
	Private _content As String
	
	Private _img As String
	
	Private _category As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OncontentChanging(value As String)
    End Sub
    Partial Private Sub OncontentChanged()
    End Sub
    Partial Private Sub OnimgChanging(value As String)
    End Sub
    Partial Private Sub OnimgChanged()
    End Sub
    Partial Private Sub OncategoryChanging(value As String)
    End Sub
    Partial Private Sub OncategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="VarChar(30)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_content", DbType:="VarChar(MAX)")>  _
	Public Property content() As String
		Get
			Return Me._content
		End Get
		Set
			If (String.Equals(Me._content, value) = false) Then
				Me.OncontentChanging(value)
				Me.SendPropertyChanging
				Me._content = value
				Me.SendPropertyChanged("content")
				Me.OncontentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_img", DbType:="VarChar(30)")>  _
	Public Property img() As String
		Get
			Return Me._img
		End Get
		Set
			If (String.Equals(Me._img, value) = false) Then
				Me.OnimgChanging(value)
				Me.SendPropertyChanging
				Me._img = value
				Me.SendPropertyChanged("img")
				Me.OnimgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="VarChar(6)")>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me.OncategoryChanging(value)
				Me.SendPropertyChanging
				Me._category = value
				Me.SendPropertyChanged("category")
				Me.OncategoryChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_pay_bills")>  _
Partial Public Class mic_pay_bill
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _address As String
	
	Private _city As String
	
	Private _province As String
	
	Private _zip As String
	
	Private _phone As String
	
	Private _email As String
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _card_type As String
	
	Private _card_number As String
	
	Private _security_number As String
	
	Private _cardholder_name As String
	
	Private _expiration As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub Oncard_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncard_typeChanged()
    End Sub
    Partial Private Sub Oncard_numberChanging(value As String)
    End Sub
    Partial Private Sub Oncard_numberChanged()
    End Sub
    Partial Private Sub Onsecurity_numberChanging(value As String)
    End Sub
    Partial Private Sub Onsecurity_numberChanged()
    End Sub
    Partial Private Sub Oncardholder_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncardholder_nameChanged()
    End Sub
    Partial Private Sub OnexpirationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnexpirationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(20)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="VarChar(20)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(30)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="VarChar(20)")>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zip", DbType:="VarChar(10)")>  _
	Public Property zip() As String
		Get
			Return Me._zip
		End Get
		Set
			If (String.Equals(Me._zip, value) = false) Then
				Me.OnzipChanging(value)
				Me.SendPropertyChanging
				Me._zip = value
				Me.SendPropertyChanged("zip")
				Me.OnzipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(10)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(20)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(18,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_card_type", DbType:="VarChar(20)")>  _
	Public Property card_type() As String
		Get
			Return Me._card_type
		End Get
		Set
			If (String.Equals(Me._card_type, value) = false) Then
				Me.Oncard_typeChanging(value)
				Me.SendPropertyChanging
				Me._card_type = value
				Me.SendPropertyChanged("card_type")
				Me.Oncard_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_card_number", DbType:="VarChar(20)")>  _
	Public Property card_number() As String
		Get
			Return Me._card_number
		End Get
		Set
			If (String.Equals(Me._card_number, value) = false) Then
				Me.Oncard_numberChanging(value)
				Me.SendPropertyChanging
				Me._card_number = value
				Me.SendPropertyChanged("card_number")
				Me.Oncard_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_security_number", DbType:="VarChar(20)")>  _
	Public Property security_number() As String
		Get
			Return Me._security_number
		End Get
		Set
			If (String.Equals(Me._security_number, value) = false) Then
				Me.Onsecurity_numberChanging(value)
				Me.SendPropertyChanging
				Me._security_number = value
				Me.SendPropertyChanged("security_number")
				Me.Onsecurity_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardholder_name", DbType:="VarChar(20)")>  _
	Public Property cardholder_name() As String
		Get
			Return Me._cardholder_name
		End Get
		Set
			If (String.Equals(Me._cardholder_name, value) = false) Then
				Me.Oncardholder_nameChanging(value)
				Me.SendPropertyChanging
				Me._cardholder_name = value
				Me.SendPropertyChanged("cardholder_name")
				Me.Oncardholder_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expiration", DbType:="Date")>  _
	Public Property expiration() As System.Nullable(Of Date)
		Get
			Return Me._expiration
		End Get
		Set
			If (Me._expiration.Equals(value) = false) Then
				Me.OnexpirationChanging(value)
				Me.SendPropertyChanging
				Me._expiration = value
				Me.SendPropertyChanged("expiration")
				Me.OnexpirationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_slider")>  _
Partial Public Class mic_slider
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _img_path As String
	
	Private _alt_name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub Onimg_pathChanging(value As String)
    End Sub
    Partial Private Sub Onimg_pathChanged()
    End Sub
    Partial Private Sub Onalt_nameChanging(value As String)
    End Sub
    Partial Private Sub Onalt_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_img_path", DbType:="VarChar(30)")>  _
	Public Property img_path() As String
		Get
			Return Me._img_path
		End Get
		Set
			If (String.Equals(Me._img_path, value) = false) Then
				Me.Onimg_pathChanging(value)
				Me.SendPropertyChanging
				Me._img_path = value
				Me.SendPropertyChanged("img_path")
				Me.Onimg_pathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alt_name", DbType:="VarChar(30)")>  _
	Public Property alt_name() As String
		Get
			Return Me._alt_name
		End Get
		Set
			If (String.Equals(Me._alt_name, value) = false) Then
				Me.Onalt_nameChanging(value)
				Me.SendPropertyChanging
				Me._alt_name = value
				Me.SendPropertyChanged("alt_name")
				Me.Onalt_nameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mic_symptom_checker")>  _
Partial Public Class mic_symptom_checker
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _region As String
	
	Private _area As String
	
	Private _symptom As String
	
	Private _causes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnregionChanging(value As String)
    End Sub
    Partial Private Sub OnregionChanged()
    End Sub
    Partial Private Sub OnareaChanging(value As String)
    End Sub
    Partial Private Sub OnareaChanged()
    End Sub
    Partial Private Sub OnsymptomChanging(value As String)
    End Sub
    Partial Private Sub OnsymptomChanged()
    End Sub
    Partial Private Sub OncausesChanging(value As String)
    End Sub
    Partial Private Sub OncausesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_region", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property region() As String
		Get
			Return Me._region
		End Get
		Set
			If (String.Equals(Me._region, value) = false) Then
				Me.OnregionChanging(value)
				Me.SendPropertyChanging
				Me._region = value
				Me.SendPropertyChanged("region")
				Me.OnregionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property area() As String
		Get
			Return Me._area
		End Get
		Set
			If (String.Equals(Me._area, value) = false) Then
				Me.OnareaChanging(value)
				Me.SendPropertyChanging
				Me._area = value
				Me.SendPropertyChanged("area")
				Me.OnareaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_symptom", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property symptom() As String
		Get
			Return Me._symptom
		End Get
		Set
			If (String.Equals(Me._symptom, value) = false) Then
				Me.OnsymptomChanging(value)
				Me.SendPropertyChanging
				Me._symptom = value
				Me.SendPropertyChanged("symptom")
				Me.OnsymptomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_causes", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property causes() As String
		Get
			Return Me._causes
		End Get
		Set
			If (String.Equals(Me._causes, value) = false) Then
				Me.OncausesChanging(value)
				Me.SendPropertyChanging
				Me._causes = value
				Me.SendPropertyChanged("causes")
				Me.OncausesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
